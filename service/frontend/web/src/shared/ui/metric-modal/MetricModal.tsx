import { Chart } from '../Chart'
import { TrendDownIcon, TrendNeutralIcon, TrendUpIcon } from '../Icon/icons'
import styles from './MetricModal.module.scss'
import { FC } from 'react'

interface MetricModalProps {
  isVisible: boolean
  onClose: () => void
  onShowRecommendations?: () => void
  metric: {
    title: string
    value: string
    change: string
    trend: 'up' | 'down' | 'neutral'
    category: string
  } | null
}

const getTrendIcon = (trend: 'up' | 'down' | 'neutral') => {
  switch (trend) {
    case 'up':
      return <TrendUpIcon />
    case 'down':
      return <TrendDownIcon />
    case 'neutral':
      return <TrendNeutralIcon />
    default:
      return <TrendNeutralIcon />
  }
}

const getTrendColor = (trend: 'up' | 'down' | 'neutral') => {
  switch (trend) {
    case 'up':
      return '#CC5F5F'
    case 'down':
      return '#3A78FF'
    case 'neutral':
      return '#3A78FF'
    default:
      return '#3A78FF'
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
const generateChartData = (
  metricTitle: string,
  trend: 'up' | 'down' | 'neutral',
) => {
  // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
  const hash = metricTitle
    .split('')
    .reduce((acc, char) => acc + char.charCodeAt(0), 0)

  const data: { x: number; y: number }[] = []
  let baseValue = 50 + (hash % 30) // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 50 –¥–æ 80

  for (let i = 0; i < 12; i++) {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
    const variation = Math.sin(i * 0.5) * 10 + (Math.random() * 6 - 3)

    if (trend === 'up') {
      baseValue += Math.random() * 2 + 0.5 // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç
    } else if (trend === 'down') {
      baseValue -= Math.random() * 2 + 0.5 // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
    }

    const value = Math.max(10, Math.min(100, baseValue + variation))
    data.push({ x: i, y: Math.round(value) })
  }

  return data
}

export const MetricModal: FC<MetricModalProps> = ({
  isVisible,
  onClose,
  onShowRecommendations,
  metric,
}) => {
  if (!isVisible || !metric) return null

  return (
    <div
      className={styles.overlay}
      onClick={onClose}
    >
      <div
        className={styles.modal}
        onClick={e => e.stopPropagation()}
      >
        <div className={styles.header}>
          <h3 className={styles.title}>{metric.title}</h3>
          <button
            className={styles.closeButton}
            onClick={onClose}
          >
            ‚úï
          </button>
        </div>

        <div className={styles.content}>
          <div className={styles.category}>
            <span className={styles.categoryLabel}>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
            <span className={styles.categoryValue}>{metric.category}</span>
          </div>

          <div className={styles.metricInfo}>
            <div className={styles.valueSection}>
              <span className={styles.valueLabel}>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</span>
              <span
                className={styles.value}
                style={{ color: getTrendColor(metric.trend) }}
              >
                {metric.value}
              </span>
            </div>

            <div className={styles.changeSection}>
              <span className={styles.changeLabel}>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</span>
              <span
                className={styles.change}
                style={{ color: getTrendColor(metric.trend) }}
              >
                {getTrendIcon(metric.trend)} {metric.change}
              </span>
            </div>
          </div>

          <div className={styles.description}>
            <h4>–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è</h4>
            <p>
              –î–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
              –∫–ª—é—á–µ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è.
              {metric.trend === 'up' && ' –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞.'}
              {metric.trend === 'down' &&
                ' –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞.'}
              {metric.trend === 'neutral' && ' –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º.'}
            </p>

            {/* –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è */}
            <div className={styles.chartSection}>
              <h5>–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤</h5>
              <div className={styles.chartContainer}>
                <Chart
                  data={generateChartData(metric.title, metric.trend)}
                  color={getTrendColor(metric.trend)}
                  animated={true}
                  interactive={true}
                />
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö (–∫—Ä–∞—Å–Ω—ã—Ö) */}
            {metric.trend === 'up' && onShowRecommendations && (
              <div className={styles.recommendationsSection}>
                <button
                  className={styles.recommendationsButton}
                  onClick={onShowRecommendations}
                >
                  üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
